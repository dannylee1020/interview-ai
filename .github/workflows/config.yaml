name: Deploy

on:
  push:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      task: ${{steps.filter.outputs.task}}
      app: ${{steps.filter.outputs.app}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Path filtering
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            task:
              - 'deploy/**'
            app:
              - 'Dockerfile'
              - 'app/**'
            migration:
              - 'migrations/**'

  build-and-deploy:
    needs: changes
    if: ${{needs.changes.outputs.app == 'true'}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to AWS ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 077860636820.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker image
        id: build-image
        run: |
          docker buildx build --platform=linux/amd64 -t interview-ai .
          docker tag interview-ai:latest 077860636820.dkr.ecr.us-east-1.amazonaws.com/interview-ai:latest

      - name: Push Docker image to ECR
        id: push-image
        run: |
          docker push 077860636820.dkr.ecr.us-east-1.amazonaws.com/interview-ai:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster interview-ai-server --service service-api --task-definition run-container --enable-execute-command --force-new-deployment

  update-ecs-task:
    needs: changes
    if: ${{needs.changes.outputs.task == 'true'}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Register task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://deploy/task.json
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster interview-ai-server --service service-api --task-definition run-container --enable-execute-command

  run-migration:
    needs: changes
    if: ${{needs.changes.outputs.migration == 'true'}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Flyway
        run: |
           wget -qO- https://download.red-gate.com/maven/release/com/redgate/flyway/flyway-commandline/10.6.0/flyway-commandline-10.6.0-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-10.6.0/flyway /usr/local/bin

      - name: Perform migration
        run: flyway migrate -url=${{ secrets.DB_URL }} -user=postgres -password=${{ secrets.DB_PASSWORD }} -locations=filesystem:/migrations

